{"ast":null,"code":"import{isChromeDebugger,isJest,isWeb,shouldBeUseWeb}from\"./PlatformChecker\";import{_updatePropsJS}from\"./js-reanimated\";import{processColorsInProps}from\"./Colors\";var IS_NATIVE=!shouldBeUseWeb();export var setNativeProps;if(isWeb()){setNativeProps=function setNativeProps(_animatedRef,_updates){var component=_animatedRef();_updatePropsJS(_updates,{_component:component});};}else if(IS_NATIVE&&global._IS_FABRIC){setNativeProps=function setNativeProps(animatedRef,updates){'worklet';if(!_WORKLET){console.warn('[Reanimated] setNativeProps() can only be used on the UI runtime.');return;}var shadowNodeWrapper=animatedRef();processColorsInProps(updates);_updatePropsFabric([{shadowNodeWrapper:shadowNodeWrapper,updates:updates}]);};}else if(IS_NATIVE){setNativeProps=function setNativeProps(animatedRef,updates){'worklet';if(!_WORKLET){console.warn('[Reanimated] setNativeProps() can only be used on the UI runtime.');return;}var tag=animatedRef();var name=animatedRef.viewName.value;processColorsInProps(updates);_updatePropsPaper([{tag:tag,name:name,updates:updates}]);};}else if(isChromeDebugger()){setNativeProps=function setNativeProps(){console.warn('[Reanimated] setNativeProps() is not supported with Chrome Debugger.');};}else if(isJest()){setNativeProps=function setNativeProps(){console.warn('[Reanimated] setNativeProps() is not supported with Jest.');};}else{setNativeProps=function setNativeProps(){console.warn('[Reanimated] setNativeProps() is not supported on this configuration.');};}","map":{"version":3,"names":["isChromeDebugger","isJest","isWeb","shouldBeUseWeb","_updatePropsJS","processColorsInProps","IS_NATIVE","setNativeProps","_animatedRef","_updates","component","_component","global","_IS_FABRIC","animatedRef","updates","_WORKLET","console","warn","shadowNodeWrapper","_updatePropsFabric","tag","name","viewName","value","_updatePropsPaper"],"sources":["C:\\Users\\Davi\\Desktop\\projeto\\telaLogin\\node_modules\\react-native-reanimated\\lib\\module\\reanimated2\\SetNativeProps.ts"],"sourcesContent":["import type { ShadowNodeWrapper, StyleProps } from './commonTypes';\nimport {\n  isChromeDebugger,\n  isJest,\n  isWeb,\n  shouldBeUseWeb,\n} from './PlatformChecker';\n\nimport type { AnimatedRef } from './hook/commonTypes';\nimport type { Component } from 'react';\nimport { _updatePropsJS } from './js-reanimated';\nimport { processColorsInProps } from './Colors';\n\nconst IS_NATIVE = !shouldBeUseWeb();\n\nexport let setNativeProps: <T extends Component>(\n  animatedRef: AnimatedRef<T>,\n  updates: StyleProps\n) => void;\n\nif (isWeb()) {\n  setNativeProps = (_animatedRef, _updates) => {\n    const component = (_animatedRef as any)();\n    _updatePropsJS(_updates, { _component: component });\n  };\n} else if (IS_NATIVE && global._IS_FABRIC) {\n  setNativeProps = (animatedRef, updates) => {\n    'worklet';\n    if (!_WORKLET) {\n      console.warn(\n        '[Reanimated] setNativeProps() can only be used on the UI runtime.'\n      );\n      return;\n    }\n    const shadowNodeWrapper = (animatedRef as any)() as ShadowNodeWrapper;\n    processColorsInProps(updates);\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    _updatePropsFabric!([{ shadowNodeWrapper, updates }]);\n  };\n} else if (IS_NATIVE) {\n  setNativeProps = (animatedRef, updates) => {\n    'worklet';\n    if (!_WORKLET) {\n      console.warn(\n        '[Reanimated] setNativeProps() can only be used on the UI runtime.'\n      );\n      return;\n    }\n    const tag = (animatedRef as any)() as number;\n    const name = (animatedRef as any).viewName.value;\n    processColorsInProps(updates);\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    _updatePropsPaper!([{ tag, name, updates }]);\n  };\n} else if (isChromeDebugger()) {\n  setNativeProps = () => {\n    console.warn(\n      '[Reanimated] setNativeProps() is not supported with Chrome Debugger.'\n    );\n  };\n} else if (isJest()) {\n  setNativeProps = () => {\n    console.warn('[Reanimated] setNativeProps() is not supported with Jest.');\n  };\n} else {\n  setNativeProps = () => {\n    console.warn(\n      '[Reanimated] setNativeProps() is not supported on this configuration.'\n    );\n  };\n}\n"],"mappings":"AACA,OACEA,gBAAgB,CAChBC,MAAM,CACNC,KAAK,CACLC,cAAc,yBAKhB,OAASC,cAAc,uBACvB,OAASC,oBAAoB,gBAE7B,GAAM,CAAAC,SAAS,CAAG,CAACH,cAAc,EAAE,CAEnC,MAAO,IAAI,CAAAI,cAGF,CAET,GAAIL,KAAK,EAAE,CAAE,CACXK,cAAc,CAAG,SAAAA,eAACC,YAAY,CAAEC,QAAQ,CAAK,CAC3C,GAAM,CAAAC,SAAS,CAAIF,YAAY,EAAU,CACzCJ,cAAc,CAACK,QAAQ,CAAE,CAAEE,UAAU,CAAED,SAAU,CAAC,CAAC,CACrD,CAAC,CACH,CAAC,IAAM,IAAIJ,SAAS,EAAIM,MAAM,CAACC,UAAU,CAAE,CACzCN,cAAc,CAAG,SAAAA,eAACO,WAAW,CAAEC,OAAO,CAAK,CACzC,SAAS,CACT,GAAI,CAACC,QAAQ,CAAE,CACbC,OAAO,CAACC,IAAI,CACV,mEAAmE,CACpE,CACD,OACF,CACA,GAAM,CAAAC,iBAAiB,CAAIL,WAAW,EAA+B,CACrET,oBAAoB,CAACU,OAAO,CAAC,CAE7BK,kBAAkB,CAAE,CAAC,CAAED,iBAAiB,CAAjBA,iBAAiB,CAAEJ,OAAA,CAAAA,OAAQ,CAAC,CAAC,CAAC,CACvD,CAAC,CACH,CAAC,IAAM,IAAIT,SAAS,CAAE,CACpBC,cAAc,CAAG,SAAAA,eAACO,WAAW,CAAEC,OAAO,CAAK,CACzC,SAAS,CACT,GAAI,CAACC,QAAQ,CAAE,CACbC,OAAO,CAACC,IAAI,CACV,mEAAmE,CACpE,CACD,OACF,CACA,GAAM,CAAAG,GAAG,CAAIP,WAAW,EAAoB,CAC5C,GAAM,CAAAQ,IAAI,CAAIR,WAAW,CAASS,QAAQ,CAACC,KAAK,CAChDnB,oBAAoB,CAACU,OAAO,CAAC,CAE7BU,iBAAiB,CAAE,CAAC,CAAEJ,GAAG,CAAHA,GAAG,CAAEC,IAAI,CAAJA,IAAI,CAAEP,OAAA,CAAAA,OAAQ,CAAC,CAAC,CAAC,CAC9C,CAAC,CACH,CAAC,IAAM,IAAIf,gBAAgB,EAAE,CAAE,CAC7BO,cAAc,CAAG,SAAAA,eAAA,CAAM,CACrBU,OAAO,CAACC,IAAI,CACV,sEAAsE,CACvE,CACH,CAAC,CACH,CAAC,IAAM,IAAIjB,MAAM,EAAE,CAAE,CACnBM,cAAc,CAAG,SAAAA,eAAA,CAAM,CACrBU,OAAO,CAACC,IAAI,CAAC,2DAA2D,CAAC,CAC3E,CAAC,CACH,CAAC,IAAM,CACLX,cAAc,CAAG,SAAAA,eAAA,CAAM,CACrBU,OAAO,CAACC,IAAI,CACV,uEAAuE,CACxE,CACH,CAAC,CACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}