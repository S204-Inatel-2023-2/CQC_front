{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";export function isAffineMatrixFlat(x){'worklet';return Array.isArray(x)&&x.length===16&&x.every(function(element){return typeof element==='number'&&!isNaN(element);});}export function isAffineMatrix(x){'worklet';return Array.isArray(x)&&x.length===4&&x.every(function(row){return Array.isArray(row)&&row.length===4&&row.every(function(element){return typeof element==='number'&&!isNaN(element);});});}export function flatten(matrix){'worklet';return matrix.flat();}export function unflatten(m){'worklet';return[[m[0],m[1],m[2],m[3]],[m[4],m[5],m[6],m[7]],[m[8],m[9],m[10],m[11]],[m[12],m[13],m[14],m[15]]];}function maybeFlattenMatrix(matrix){'worklet';return isAffineMatrix(matrix)?flatten(matrix):matrix;}export function multiplyMatrices(a,b){'worklet';return[[a[0][0]*b[0][0]+a[0][1]*b[1][0]+a[0][2]*b[2][0]+a[0][3]*b[3][0],a[0][0]*b[0][1]+a[0][1]*b[1][1]+a[0][2]*b[2][1]+a[0][3]*b[3][1],a[0][0]*b[0][2]+a[0][1]*b[1][2]+a[0][2]*b[2][2]+a[0][3]*b[3][2],a[0][0]*b[0][3]+a[0][1]*b[1][3]+a[0][2]*b[2][3]+a[0][3]*b[3][3]],[a[1][0]*b[0][0]+a[1][1]*b[1][0]+a[1][2]*b[2][0]+a[1][3]*b[3][0],a[1][0]*b[0][1]+a[1][1]*b[1][1]+a[1][2]*b[2][1]+a[1][3]*b[3][1],a[1][0]*b[0][2]+a[1][1]*b[1][2]+a[1][2]*b[2][2]+a[1][3]*b[3][2],a[1][0]*b[0][3]+a[1][1]*b[1][3]+a[1][2]*b[2][3]+a[1][3]*b[3][3]],[a[2][0]*b[0][0]+a[2][1]*b[1][0]+a[2][2]*b[2][0]+a[2][3]*b[3][0],a[2][0]*b[0][1]+a[2][1]*b[1][1]+a[2][2]*b[2][1]+a[2][3]*b[3][1],a[2][0]*b[0][2]+a[2][1]*b[1][2]+a[2][2]*b[2][2]+a[2][3]*b[3][2],a[2][0]*b[0][3]+a[2][1]*b[1][3]+a[2][2]*b[2][3]+a[2][3]*b[3][3]],[a[3][0]*b[0][0]+a[3][1]*b[1][0]+a[3][2]*b[2][0]+a[3][3]*b[3][0],a[3][0]*b[0][1]+a[3][1]*b[1][1]+a[3][2]*b[2][1]+a[3][3]*b[3][1],a[3][0]*b[0][2]+a[3][1]*b[1][2]+a[3][2]*b[2][2]+a[3][3]*b[3][2],a[3][0]*b[0][3]+a[3][1]*b[1][3]+a[3][2]*b[2][3]+a[3][3]*b[3][3]]];}export function subtractMatrices(maybeFlatA,maybeFlatB){'worklet';var isFlatOnStart=isAffineMatrixFlat(maybeFlatA);var a=maybeFlattenMatrix(maybeFlatA);var b=maybeFlattenMatrix(maybeFlatB);var c=a.map(function(_,i){return a[i]-b[i];});return isFlatOnStart?c:unflatten(c);}export function addMatrices(maybeFlatA,maybeFlatB){'worklet';var isFlatOnStart=isAffineMatrixFlat(maybeFlatA);var a=maybeFlattenMatrix(maybeFlatA);var b=maybeFlattenMatrix(maybeFlatB);var c=a.map(function(_,i){return a[i]+b[i];});return isFlatOnStart?c:unflatten(c);}export function scaleMatrix(maybeFlatA,scalar){'worklet';var isFlatOnStart=isAffineMatrixFlat(maybeFlatA);var a=maybeFlattenMatrix(maybeFlatA);var b=a.map(function(x){return x*scalar;});return isFlatOnStart?b:unflatten(b);}export function getRotationMatrix(angle){'worklet';var axis=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'z';var cos=Math.cos(angle);var sin=Math.sin(angle);switch(axis){case'z':return[[cos,sin,0,0],[-sin,cos,0,0],[0,0,1,0],[0,0,0,1]];case'y':return[[cos,0,-sin,0],[0,1,0,0],[sin,0,cos,0],[0,0,0,1]];case'x':return[[1,0,0,0],[0,cos,sin,0],[0,-sin,cos,0],[0,0,0,1]];}}function norm3d(x,y,z){'worklet';return Math.sqrt(x*x+y*y+z*z);}function transposeMatrix(matrix){'worklet';var m=flatten(matrix);return[[m[0],m[4],m[8],m[12]],[m[1],m[5],m[9],m[13]],[m[2],m[6],m[10],m[14]],[m[3],m[7],m[11],m[15]]];}function assertVectorsHaveEqualLengths(a,b){'worklet';if(__DEV__&&a.length!==b.length){throw new Error(`[Reanimated] Cannot calculate inner product of two vectors of different lengths. Length of ${a} is ${a.length} and length of ${b} is ${b.length}.`);}}function innerProduct(a,b){'worklet';assertVectorsHaveEqualLengths(a,b);return a.reduce(function(acc,_,i){return acc+a[i]*b[i];},0);}function projection(u,a){'worklet';assertVectorsHaveEqualLengths(u,a);var s=innerProduct(u,a)/innerProduct(u,u);return u.map(function(e){return e*s;});}function subtractVectors(a,b){'worklet';assertVectorsHaveEqualLengths(a,b);return a.map(function(_,i){return a[i]-b[i];});}function scaleVector(u,a){'worklet';return u.map(function(e){return e*a;});}function gramSchmidtAlgorithm(matrix){'worklet';var _matrix=_slicedToArray(matrix,4),a0=_matrix[0],a1=_matrix[1],a2=_matrix[2],a3=_matrix[3];var u0=a0;var u1=subtractVectors(a1,projection(u0,a1));var u2=subtractVectors(subtractVectors(a2,projection(u0,a2)),projection(u1,a2));var u3=subtractVectors(subtractVectors(subtractVectors(a3,projection(u0,a3)),projection(u1,a3)),projection(u2,a3));var _map=[u0,u1,u2,u3].map(function(u){return scaleVector(u,1/Math.sqrt(innerProduct(u,u)));}),_map2=_slicedToArray(_map,4),e0=_map2[0],e1=_map2[1],e2=_map2[2],e3=_map2[3];var rotationMatrix=[[e0[0],e1[0],e2[0],e3[0]],[e0[1],e1[1],e2[1],e3[1]],[e0[2],e1[2],e2[2],e3[2]],[e0[3],e1[3],e2[3],e3[3]]];var skewMatrix=[[innerProduct(e0,a0),innerProduct(e0,a1),innerProduct(e0,a2),innerProduct(e0,a3)],[0,innerProduct(e1,a1),innerProduct(e1,a2),innerProduct(e1,a3)],[0,0,innerProduct(e2,a2),innerProduct(e2,a3)],[0,0,0,innerProduct(e3,a3)]];return{rotationMatrix:transposeMatrix(rotationMatrix),skewMatrix:transposeMatrix(skewMatrix)};}export function decomposeMatrix(unknownTypeMatrix){'worklet';var matrix=maybeFlattenMatrix(unknownTypeMatrix);if(matrix[15]===0){throw new Error('[Reanimated] Invalid transform matrix.');}matrix.forEach(function(_,i){return matrix[i]/=matrix[15];});var translationMatrix=[[1,0,0,0],[0,1,0,0],[0,0,1,0],[matrix[12],matrix[13],matrix[14],1]];var sx=matrix[15]*norm3d(matrix[0],matrix[4],matrix[8]);var sy=matrix[15]*norm3d(matrix[1],matrix[5],matrix[9]);var sz=matrix[15]*norm3d(matrix[2],matrix[6],matrix[10]);var scaleMatrix=[[sx,0,0,0],[0,sy,0,0],[0,0,sz,0],[0,0,0,1]];var rotationAndSkewMatrix=[[matrix[0]/sx,matrix[1]/sx,matrix[2]/sx,0],[matrix[4]/sy,matrix[5]/sy,matrix[6]/sy,0],[matrix[8]/sz,matrix[9]/sz,matrix[10]/sz,0],[0,0,0,1]];var _gramSchmidtAlgorithm=gramSchmidtAlgorithm(rotationAndSkewMatrix),rotationMatrix=_gramSchmidtAlgorithm.rotationMatrix,skewMatrix=_gramSchmidtAlgorithm.skewMatrix;return{translationMatrix:translationMatrix,scaleMatrix:scaleMatrix,rotationMatrix:rotationMatrix,skewMatrix:skewMatrix};}export function decomposeMatrixIntoMatricesAndAngles(matrix){'worklet';var _decomposeMatrix=decomposeMatrix(matrix),scaleMatrix=_decomposeMatrix.scaleMatrix,rotationMatrix=_decomposeMatrix.rotationMatrix,translationMatrix=_decomposeMatrix.translationMatrix,skewMatrix=_decomposeMatrix.skewMatrix;var sinRy=-rotationMatrix[0][2];var ry=Math.asin(sinRy);var rx;var rz;if(sinRy===1||sinRy===-1){rz=0;rx=Math.atan2(sinRy*rotationMatrix[0][1],sinRy*rotationMatrix[0][2]);}else{rz=Math.atan2(rotationMatrix[0][1],rotationMatrix[0][0]);rx=Math.atan2(rotationMatrix[1][2],rotationMatrix[2][2]);}return{scaleMatrix:scaleMatrix,rotationMatrix:rotationMatrix,translationMatrix:translationMatrix,skewMatrix:skewMatrix,rx:rx||0,ry:ry||0,rz:rz||0};}","map":{"version":3,"names":["isAffineMatrixFlat","x","Array","isArray","length","every","element","isNaN","isAffineMatrix","row","flatten","matrix","flat","unflatten","m","maybeFlattenMatrix","multiplyMatrices","a","b","subtractMatrices","maybeFlatA","maybeFlatB","isFlatOnStart","c","map","_","i","addMatrices","scaleMatrix","scalar","getRotationMatrix","angle","axis","arguments","undefined","cos","Math","sin","norm3d","y","z","sqrt","transposeMatrix","assertVectorsHaveEqualLengths","__DEV__","Error","innerProduct","reduce","acc","projection","u","s","e","subtractVectors","scaleVector","gramSchmidtAlgorithm","_matrix","_slicedToArray","a0","a1","a2","a3","u0","u1","u2","u3","_map","_map2","e0","e1","e2","e3","rotationMatrix","skewMatrix","decomposeMatrix","unknownTypeMatrix","forEach","translationMatrix","sx","sy","sz","rotationAndSkewMatrix","_gramSchmidtAlgorithm","decomposeMatrixIntoMatricesAndAngles","_decomposeMatrix","sinRy","ry","asin","rx","rz","atan2"],"sources":["C:\\Users\\Davi\\Desktop\\projeto\\telaLogin\\node_modules\\react-native-reanimated\\lib\\module\\reanimated2\\animation\\transformationMatrix\\matrixUtils.tsx"],"sourcesContent":["type FixedLengthArray<\n  T,\n  L extends number,\n  PassedObject = [T, ...Array<T>]\n> = PassedObject & {\n  readonly length: L;\n  [I: number]: T;\n};\n\nexport type AffineMatrix = FixedLengthArray<FixedLengthArray<number, 4>, 4>;\n\nexport type AffineMatrixFlat = FixedLengthArray<number, 16>;\n\ntype TransformMatrixDecomposition = Record<\n  'translationMatrix' | 'scaleMatrix' | 'rotationMatrix' | 'skewMatrix',\n  AffineMatrix\n>;\n\ntype Axis = 'x' | 'y' | 'z';\n\ninterface TansformMatrixDecompositionWithAngles\n  extends TransformMatrixDecomposition {\n  rx: number;\n  ry: number;\n  rz: number;\n}\n\nexport function isAffineMatrixFlat(x: unknown): x is AffineMatrixFlat {\n  'worklet';\n  return (\n    Array.isArray(x) &&\n    x.length === 16 &&\n    x.every((element) => typeof element === 'number' && !isNaN(element))\n  );\n}\n\n// ts-prune-ignore-next This function is exported to be tested\nexport function isAffineMatrix(x: unknown): x is AffineMatrix {\n  'worklet';\n  return (\n    Array.isArray(x) &&\n    x.length === 4 &&\n    x.every(\n      (row) =>\n        Array.isArray(row) &&\n        row.length === 4 &&\n        row.every((element) => typeof element === 'number' && !isNaN(element))\n    )\n  );\n}\n\nexport function flatten(matrix: AffineMatrix): AffineMatrixFlat {\n  'worklet';\n  return matrix.flat() as AffineMatrixFlat;\n}\n\n// ts-prune-ignore-next This function is exported to be tested\nexport function unflatten(m: AffineMatrixFlat): AffineMatrix {\n  'worklet';\n  return [\n    [m[0], m[1], m[2], m[3]],\n    [m[4], m[5], m[6], m[7]],\n    [m[8], m[9], m[10], m[11]],\n    [m[12], m[13], m[14], m[15]],\n  ] as AffineMatrix;\n}\n\nfunction maybeFlattenMatrix(\n  matrix: AffineMatrix | AffineMatrixFlat\n): AffineMatrixFlat {\n  'worklet';\n  return isAffineMatrix(matrix) ? flatten(matrix) : matrix;\n}\n\nexport function multiplyMatrices(\n  a: AffineMatrix,\n  b: AffineMatrix\n): AffineMatrix {\n  'worklet';\n  return [\n    [\n      a[0][0] * b[0][0] +\n        a[0][1] * b[1][0] +\n        a[0][2] * b[2][0] +\n        a[0][3] * b[3][0],\n\n      a[0][0] * b[0][1] +\n        a[0][1] * b[1][1] +\n        a[0][2] * b[2][1] +\n        a[0][3] * b[3][1],\n\n      a[0][0] * b[0][2] +\n        a[0][1] * b[1][2] +\n        a[0][2] * b[2][2] +\n        a[0][3] * b[3][2],\n\n      a[0][0] * b[0][3] +\n        a[0][1] * b[1][3] +\n        a[0][2] * b[2][3] +\n        a[0][3] * b[3][3],\n    ],\n    [\n      a[1][0] * b[0][0] +\n        a[1][1] * b[1][0] +\n        a[1][2] * b[2][0] +\n        a[1][3] * b[3][0],\n\n      a[1][0] * b[0][1] +\n        a[1][1] * b[1][1] +\n        a[1][2] * b[2][1] +\n        a[1][3] * b[3][1],\n\n      a[1][0] * b[0][2] +\n        a[1][1] * b[1][2] +\n        a[1][2] * b[2][2] +\n        a[1][3] * b[3][2],\n\n      a[1][0] * b[0][3] +\n        a[1][1] * b[1][3] +\n        a[1][2] * b[2][3] +\n        a[1][3] * b[3][3],\n    ],\n    [\n      a[2][0] * b[0][0] +\n        a[2][1] * b[1][0] +\n        a[2][2] * b[2][0] +\n        a[2][3] * b[3][0],\n\n      a[2][0] * b[0][1] +\n        a[2][1] * b[1][1] +\n        a[2][2] * b[2][1] +\n        a[2][3] * b[3][1],\n\n      a[2][0] * b[0][2] +\n        a[2][1] * b[1][2] +\n        a[2][2] * b[2][2] +\n        a[2][3] * b[3][2],\n\n      a[2][0] * b[0][3] +\n        a[2][1] * b[1][3] +\n        a[2][2] * b[2][3] +\n        a[2][3] * b[3][3],\n    ],\n    [\n      a[3][0] * b[0][0] +\n        a[3][1] * b[1][0] +\n        a[3][2] * b[2][0] +\n        a[3][3] * b[3][0],\n\n      a[3][0] * b[0][1] +\n        a[3][1] * b[1][1] +\n        a[3][2] * b[2][1] +\n        a[3][3] * b[3][1],\n\n      a[3][0] * b[0][2] +\n        a[3][1] * b[1][2] +\n        a[3][2] * b[2][2] +\n        a[3][3] * b[3][2],\n\n      a[3][0] * b[0][3] +\n        a[3][1] * b[1][3] +\n        a[3][2] * b[2][3] +\n        a[3][3] * b[3][3],\n    ],\n  ];\n}\n\nexport function subtractMatrices<T extends AffineMatrixFlat | AffineMatrix>(\n  maybeFlatA: T,\n  maybeFlatB: T\n): T {\n  'worklet';\n  const isFlatOnStart = isAffineMatrixFlat(maybeFlatA);\n  const a: AffineMatrixFlat = maybeFlattenMatrix(maybeFlatA);\n  const b: AffineMatrixFlat = maybeFlattenMatrix(maybeFlatB);\n\n  const c = a.map((_, i) => a[i] - b[i]) as AffineMatrixFlat;\n  return isFlatOnStart ? (c as T) : (unflatten(c) as T);\n}\n\nexport function addMatrices<T extends AffineMatrixFlat | AffineMatrix>(\n  maybeFlatA: T,\n  maybeFlatB: T\n): T {\n  'worklet';\n  const isFlatOnStart = isAffineMatrixFlat(maybeFlatA);\n  const a = maybeFlattenMatrix(maybeFlatA);\n  const b = maybeFlattenMatrix(maybeFlatB);\n\n  const c = a.map((_, i) => a[i] + b[i]) as AffineMatrixFlat;\n  return isFlatOnStart ? (c as T) : (unflatten(c) as T);\n}\n\nexport function scaleMatrix<T extends AffineMatrixFlat | AffineMatrix>(\n  maybeFlatA: T,\n  scalar: number\n): T {\n  'worklet';\n  const isFlatOnStart = isAffineMatrixFlat(maybeFlatA);\n  const a = maybeFlattenMatrix(maybeFlatA);\n\n  const b = a.map((x) => x * scalar) as AffineMatrixFlat;\n  return isFlatOnStart ? (b as T) : (unflatten(b) as T);\n}\n\nexport function getRotationMatrix(\n  angle: number,\n  axis: Axis = 'z'\n): AffineMatrix {\n  'worklet';\n  const cos = Math.cos(angle);\n  const sin = Math.sin(angle);\n  switch (axis) {\n    case 'z':\n      return [\n        [cos, sin, 0, 0],\n        [-sin, cos, 0, 0],\n        [0, 0, 1, 0],\n        [0, 0, 0, 1],\n      ];\n    case 'y':\n      return [\n        [cos, 0, -sin, 0],\n        [0, 1, 0, 0],\n        [sin, 0, cos, 0],\n        [0, 0, 0, 1],\n      ];\n    case 'x':\n      return [\n        [1, 0, 0, 0],\n        [0, cos, sin, 0],\n        [0, -sin, cos, 0],\n        [0, 0, 0, 1],\n      ];\n  }\n}\n\nfunction norm3d(x: number, y: number, z: number) {\n  'worklet';\n  return Math.sqrt(x * x + y * y + z * z);\n}\n\nfunction transposeMatrix(matrix: AffineMatrix): AffineMatrix {\n  'worklet';\n  const m = flatten(matrix);\n  return [\n    [m[0], m[4], m[8], m[12]],\n    [m[1], m[5], m[9], m[13]],\n    [m[2], m[6], m[10], m[14]],\n    [m[3], m[7], m[11], m[15]],\n  ];\n}\n\nfunction assertVectorsHaveEqualLengths(a: number[], b: number[]) {\n  'worklet';\n  if (__DEV__ && a.length !== b.length) {\n    throw new Error(\n      `[Reanimated] Cannot calculate inner product of two vectors of different lengths. Length of ${a} is ${a.length} and length of ${b} is ${b.length}.`\n    );\n  }\n}\n\nfunction innerProduct(a: number[], b: number[]) {\n  'worklet';\n  assertVectorsHaveEqualLengths(a, b);\n  return a.reduce((acc, _, i) => acc + a[i] * b[i], 0);\n}\n\nfunction projection(u: number[], a: number[]) {\n  'worklet';\n  assertVectorsHaveEqualLengths(u, a);\n  const s = innerProduct(u, a) / innerProduct(u, u);\n  return u.map((e) => e * s);\n}\n\nfunction subtractVectors(a: number[], b: number[]) {\n  'worklet';\n  assertVectorsHaveEqualLengths(a, b);\n  return a.map((_, i) => a[i] - b[i]);\n}\n\nfunction scaleVector(u: number[], a: number) {\n  'worklet';\n  return u.map((e) => e * a);\n}\n\nfunction gramSchmidtAlgorithm(matrix: AffineMatrix): {\n  rotationMatrix: AffineMatrix;\n  skewMatrix: AffineMatrix;\n} {\n  // Gram-Schmidt orthogonalization decomposes any matrix with non-zero determinant into an orthogonal and a triangular matrix\n  // These matrices are equal to rotation and skew matrices respectively, because we apply it to transformation matrix\n  // That is expected to already have extracted the remaining transforms (scale & translation)\n  'worklet';\n  const [a0, a1, a2, a3] = matrix;\n\n  const u0 = a0;\n  const u1 = subtractVectors(a1, projection(u0, a1));\n  const u2 = subtractVectors(\n    subtractVectors(a2, projection(u0, a2)),\n    projection(u1, a2)\n  );\n  const u3 = subtractVectors(\n    subtractVectors(\n      subtractVectors(a3, projection(u0, a3)),\n      projection(u1, a3)\n    ),\n    projection(u2, a3)\n  );\n\n  const [e0, e1, e2, e3] = [u0, u1, u2, u3].map((u) =>\n    scaleVector(u, 1 / Math.sqrt(innerProduct(u, u)))\n  );\n\n  const rotationMatrix: AffineMatrix = [\n    [e0[0], e1[0], e2[0], e3[0]],\n    [e0[1], e1[1], e2[1], e3[1]],\n    [e0[2], e1[2], e2[2], e3[2]],\n    [e0[3], e1[3], e2[3], e3[3]],\n  ];\n\n  const skewMatrix: AffineMatrix = [\n    [\n      innerProduct(e0, a0),\n      innerProduct(e0, a1),\n      innerProduct(e0, a2),\n      innerProduct(e0, a3),\n    ],\n    [0, innerProduct(e1, a1), innerProduct(e1, a2), innerProduct(e1, a3)],\n    [0, 0, innerProduct(e2, a2), innerProduct(e2, a3)],\n    [0, 0, 0, innerProduct(e3, a3)],\n  ];\n  return {\n    rotationMatrix: transposeMatrix(rotationMatrix),\n    skewMatrix: transposeMatrix(skewMatrix),\n  };\n}\n\n// ts-prune-ignore-next This function is exported to be tested\nexport function decomposeMatrix(\n  unknownTypeMatrix: AffineMatrixFlat | AffineMatrix\n): TransformMatrixDecomposition {\n  'worklet';\n  const matrix = maybeFlattenMatrix(unknownTypeMatrix);\n\n  // normalize matrix\n  if (matrix[15] === 0) {\n    throw new Error('[Reanimated] Invalid transform matrix.');\n  }\n  matrix.forEach((_, i) => (matrix[i] /= matrix[15]));\n\n  const translationMatrix: AffineMatrix = [\n    [1, 0, 0, 0],\n    [0, 1, 0, 0],\n    [0, 0, 1, 0],\n    [matrix[12], matrix[13], matrix[14], 1],\n  ];\n  const sx = matrix[15] * norm3d(matrix[0], matrix[4], matrix[8]);\n  const sy = matrix[15] * norm3d(matrix[1], matrix[5], matrix[9]);\n  const sz = matrix[15] * norm3d(matrix[2], matrix[6], matrix[10]);\n\n  const scaleMatrix: AffineMatrix = [\n    [sx, 0, 0, 0],\n    [0, sy, 0, 0],\n    [0, 0, sz, 0],\n    [0, 0, 0, 1],\n  ];\n\n  const rotationAndSkewMatrix: AffineMatrix = [\n    [matrix[0] / sx, matrix[1] / sx, matrix[2] / sx, 0],\n    [matrix[4] / sy, matrix[5] / sy, matrix[6] / sy, 0],\n    [matrix[8] / sz, matrix[9] / sz, matrix[10] / sz, 0],\n    [0, 0, 0, 1],\n  ];\n\n  const { rotationMatrix, skewMatrix } = gramSchmidtAlgorithm(\n    rotationAndSkewMatrix\n  );\n\n  return {\n    translationMatrix,\n    scaleMatrix,\n    rotationMatrix,\n    skewMatrix,\n  };\n}\n\nexport function decomposeMatrixIntoMatricesAndAngles(\n  matrix: AffineMatrixFlat | AffineMatrix\n): TansformMatrixDecompositionWithAngles {\n  'worklet';\n  const { scaleMatrix, rotationMatrix, translationMatrix, skewMatrix } =\n    decomposeMatrix(matrix);\n\n  const sinRy = -rotationMatrix[0][2];\n\n  const ry = Math.asin(sinRy);\n  let rx;\n  let rz;\n  if (sinRy === 1 || sinRy === -1) {\n    rz = 0;\n    rx = Math.atan2(sinRy * rotationMatrix[0][1], sinRy * rotationMatrix[0][2]);\n  } else {\n    rz = Math.atan2(rotationMatrix[0][1], rotationMatrix[0][0]);\n    rx = Math.atan2(rotationMatrix[1][2], rotationMatrix[2][2]);\n  }\n\n  return {\n    scaleMatrix,\n    rotationMatrix,\n    translationMatrix,\n    skewMatrix,\n    rx: rx || 0,\n    ry: ry || 0,\n    rz: rz || 0,\n  };\n}\n"],"mappings":"iEA2BA,MAAO,SAAS,CAAAA,kBAAkBA,CAACC,CAAU,CAAyB,CACpE,SAAS,CACT,MACE,CAAAC,KAAK,CAACC,OAAO,CAACF,CAAC,CAAC,EAChBA,CAAC,CAACG,MAAM,GAAK,EAAE,EACfH,CAAC,CAACI,KAAK,CAAE,SAAAC,OAAO,QAAK,OAAO,CAAAA,OAAO,GAAK,QAAQ,EAAI,CAACC,KAAK,CAACD,OAAO,CAAC,GAAC,CAExE,CAGA,MAAO,SAAS,CAAAE,cAAcA,CAACP,CAAU,CAAqB,CAC5D,SAAS,CACT,MACE,CAAAC,KAAK,CAACC,OAAO,CAACF,CAAC,CAAC,EAChBA,CAAC,CAACG,MAAM,GAAK,CAAC,EACdH,CAAC,CAACI,KAAK,CACJ,SAAAI,GAAG,QACF,CAAAP,KAAK,CAACC,OAAO,CAACM,GAAG,CAAC,EAClBA,GAAG,CAACL,MAAM,GAAK,CAAC,EAChBK,GAAG,CAACJ,KAAK,CAAE,SAAAC,OAAO,QAAK,OAAO,CAAAA,OAAO,GAAK,QAAQ,EAAI,CAACC,KAAK,CAACD,OAAO,CAAC,GAAC,GACzE,CAEL,CAEA,MAAO,SAAS,CAAAI,OAAOA,CAACC,MAAoB,CAAoB,CAC9D,SAAS,CACT,MAAO,CAAAA,MAAM,CAACC,IAAI,EAAE,CACtB,CAGA,MAAO,SAAS,CAAAC,SAASA,CAACC,CAAmB,CAAgB,CAC3D,SAAS,CACT,MAAO,CACL,CAACA,CAAC,CAAC,CAAC,CAAC,CAAEA,CAAC,CAAC,CAAC,CAAC,CAAEA,CAAC,CAAC,CAAC,CAAC,CAAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CACxB,CAACA,CAAC,CAAC,CAAC,CAAC,CAAEA,CAAC,CAAC,CAAC,CAAC,CAAEA,CAAC,CAAC,CAAC,CAAC,CAAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CACxB,CAACA,CAAC,CAAC,CAAC,CAAC,CAAEA,CAAC,CAAC,CAAC,CAAC,CAAEA,CAAC,CAAC,EAAE,CAAC,CAAEA,CAAC,CAAC,EAAE,CAAC,CAAC,CAC1B,CAACA,CAAC,CAAC,EAAE,CAAC,CAAEA,CAAC,CAAC,EAAE,CAAC,CAAEA,CAAC,CAAC,EAAE,CAAC,CAAEA,CAAC,CAAC,EAAE,CAAC,CAAC,CAC7B,CACH,CAEA,QAAS,CAAAC,kBAAkBA,CACzBJ,MAAuC,CACrB,CAClB,SAAS,CACT,MAAO,CAAAH,cAAc,CAACG,MAAM,CAAC,CAAGD,OAAO,CAACC,MAAM,CAAC,CAAGA,MAAM,CAC1D,CAEA,MAAO,SAAS,CAAAK,gBAAgBA,CAC9BC,CAAe,CACfC,CAAe,CACD,CACd,SAAS,CACT,MAAO,CACL,CACED,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACfD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAEnBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACfD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAEnBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACfD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAEnBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACfD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACpB,CACD,CACED,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACfD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAEnBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACfD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAEnBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACfD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAEnBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACfD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACpB,CACD,CACED,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACfD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAEnBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACfD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAEnBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACfD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAEnBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACfD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACpB,CACD,CACED,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACfD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAEnBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACfD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACjBD,CAAC,CAAC,CAAC,CAAC,CAAC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"},"metadata":{},"sourceType":"module","externalDependencies":[]}