{"ast":null,"code":"import NativeReanimatedModule from\"./NativeReanimated\";import{makeShareableCloneOnUIRecursive,makeShareableCloneRecursive,registerShareableMapping}from\"./shareables\";import{runOnUI}from\"./threads\";import{valueSetter}from\"./valueSetter\";export function makeUIMutable(initial,syncDataHolder){'worklet';var listeners=new Map();var value=initial;var self={set value(newValue){valueSetter(self,newValue);},get value(){return value;},set _value(newValue){value=newValue;if(syncDataHolder){_updateDataSynchronously(syncDataHolder,makeShareableCloneOnUIRecursive(newValue));}listeners.forEach(function(listener){listener(newValue);});},get _value(){return value;},addListener:function addListener(id,listener){listeners.set(id,listener);},removeListener:function removeListener(id){listeners.delete(id);},_animation:null,_isReanimatedSharedValue:true};return self;}export function makeMutable(initial){var oneWayReadsOnly=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var value=initial;var syncDataHolder;if(!oneWayReadsOnly&&NativeReanimatedModule.native){syncDataHolder=NativeReanimatedModule.makeSynchronizedDataHolder(makeShareableCloneRecursive(value));registerShareableMapping(syncDataHolder);}var handle=makeShareableCloneRecursive({__init:function __init(){'worklet';return makeUIMutable(initial,syncDataHolder);}});var listeners=NativeReanimatedModule.native?undefined:new Map();var mutable={set value(newValue){if(NativeReanimatedModule.native){runOnUI(function(){mutable.value=newValue;})();}else{valueSetter(mutable,newValue);}},get value(){if(syncDataHolder){return NativeReanimatedModule.getDataSynchronously(syncDataHolder);}return value;},set _value(newValue){if(NativeReanimatedModule.native){throw new Error('[Reanimated] Setting `_value` directly is only possible on the UI runtime.');}value=newValue;listeners.forEach(function(listener){listener(newValue);});},get _value(){if(NativeReanimatedModule.native){throw new Error('[Reanimated] Reading from `_value` directly is only possible on the UI runtime.');}return value;},modify:function modify(modifier){runOnUI(function(){mutable.value=modifier(mutable.value);})();},addListener:function addListener(id,listener){if(NativeReanimatedModule.native){throw new Error('[Reanimated] Adding listeners is only possible on the UI runtime.');}listeners.set(id,listener);},removeListener:function removeListener(id){if(NativeReanimatedModule.native){throw new Error('[Reanimated] Removing listeners is only possible on the UI runtime.');}listeners.delete(id);},_isReanimatedSharedValue:true};registerShareableMapping(mutable,handle);return mutable;}export function makeRemote(){var initial=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var handle=makeShareableCloneRecursive({__init:function __init(){'worklet';return initial;}});registerShareableMapping(initial,handle);return initial;}","map":{"version":3,"names":["NativeReanimatedModule","makeShareableCloneOnUIRecursive","makeShareableCloneRecursive","registerShareableMapping","runOnUI","valueSetter","makeUIMutable","initial","syncDataHolder","listeners","Map","value","self","newValue","_value","_updateDataSynchronously","forEach","listener","addListener","id","set","removeListener","delete","_animation","_isReanimatedSharedValue","makeMutable","oneWayReadsOnly","arguments","length","undefined","native","makeSynchronizedDataHolder","handle","__init","mutable","getDataSynchronously","Error","modify","modifier","makeRemote"],"sources":["C:\\Users\\Davi\\Desktop\\projeto\\telaLogin\\node_modules\\react-native-reanimated\\lib\\module\\reanimated2\\mutables.ts"],"sourcesContent":["import NativeReanimatedModule from './NativeReanimated';\nimport type { SharedValue, ShareableSyncDataHolderRef } from './commonTypes';\nimport {\n  makeShareableCloneOnUIRecursive,\n  makeShareableCloneRecursive,\n  registerShareableMapping,\n} from './shareables';\nimport { runOnUI } from './threads';\nimport { valueSetter } from './valueSetter';\n\nexport function makeUIMutable<T>(\n  initial: T,\n  syncDataHolder?: ShareableSyncDataHolderRef<T>\n) {\n  'worklet';\n\n  const listeners = new Map();\n  let value = initial;\n\n  const self = {\n    set value(newValue) {\n      valueSetter(self, newValue);\n    },\n    get value() {\n      return value;\n    },\n    /**\n     * _value prop should only be accessed by the valueSetter implementation\n     * which may make the decision about updating the mutable value depending\n     * on the provided new value. All other places should only attempt to modify\n     * the mutable by assigning to value prop directly.\n     */\n    set _value(newValue: T) {\n      value = newValue;\n      if (syncDataHolder) {\n        _updateDataSynchronously(\n          syncDataHolder,\n          makeShareableCloneOnUIRecursive(newValue)\n        );\n      }\n      listeners.forEach((listener) => {\n        listener(newValue);\n      });\n    },\n    get _value(): T {\n      return value;\n    },\n    addListener: (id: number, listener: (newValue: T) => void) => {\n      listeners.set(id, listener);\n    },\n    removeListener: (id: number) => {\n      listeners.delete(id);\n    },\n    _animation: null,\n    _isReanimatedSharedValue: true,\n  };\n  return self;\n}\n\nexport function makeMutable<T>(\n  initial: T,\n  oneWayReadsOnly = false\n): SharedValue<T> {\n  let value: T = initial;\n  let syncDataHolder: ShareableSyncDataHolderRef<T> | undefined;\n  if (!oneWayReadsOnly && NativeReanimatedModule.native) {\n    // updates are always synchronous when running on web or in Jest environment\n    syncDataHolder = NativeReanimatedModule.makeSynchronizedDataHolder(\n      makeShareableCloneRecursive(value)\n    );\n    registerShareableMapping(syncDataHolder);\n  }\n  const handle = makeShareableCloneRecursive({\n    __init: () => {\n      'worklet';\n      return makeUIMutable(initial, syncDataHolder);\n    },\n  });\n  // listeners can only work on JS thread on Web and jest environments\n  const listeners = NativeReanimatedModule.native ? undefined : new Map();\n  const mutable = {\n    set value(newValue) {\n      if (NativeReanimatedModule.native) {\n        runOnUI(() => {\n          mutable.value = newValue;\n        })();\n      } else {\n        valueSetter(mutable, newValue);\n      }\n    },\n    get value() {\n      if (syncDataHolder) {\n        return NativeReanimatedModule.getDataSynchronously(syncDataHolder);\n      }\n      return value;\n    },\n    set _value(newValue: T) {\n      if (NativeReanimatedModule.native) {\n        throw new Error(\n          '[Reanimated] Setting `_value` directly is only possible on the UI runtime.'\n        );\n      }\n      value = newValue;\n      listeners!.forEach((listener) => {\n        listener(newValue);\n      });\n    },\n    get _value(): T {\n      if (NativeReanimatedModule.native) {\n        throw new Error(\n          '[Reanimated] Reading from `_value` directly is only possible on the UI runtime.'\n        );\n      }\n      return value;\n    },\n    modify: (modifier: (value: T) => T) => {\n      runOnUI(() => {\n        mutable.value = modifier(mutable.value);\n      })();\n    },\n    addListener: (id: number, listener: (value: T) => void) => {\n      if (NativeReanimatedModule.native) {\n        throw new Error(\n          '[Reanimated] Adding listeners is only possible on the UI runtime.'\n        );\n      }\n      listeners!.set(id, listener);\n    },\n    removeListener: (id: number) => {\n      if (NativeReanimatedModule.native) {\n        throw new Error(\n          '[Reanimated] Removing listeners is only possible on the UI runtime.'\n        );\n      }\n      listeners!.delete(id);\n    },\n    _isReanimatedSharedValue: true,\n  };\n  registerShareableMapping(mutable, handle);\n  return mutable;\n}\n\nexport function makeRemote<T extends object>(initial: T = {} as T): T {\n  const handle = makeShareableCloneRecursive({\n    __init: () => {\n      'worklet';\n      return initial;\n    },\n  });\n  registerShareableMapping(initial, handle);\n  return initial;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}